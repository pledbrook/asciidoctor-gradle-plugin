/*
 * Copyright 2013-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
        classpath 'nu.studer:gradle-plugindev-plugin:1.0.4'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.1'
    }
}

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'nu.studer.plugindev'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/integration-tests.gradle'

version = "1.6.0-SNAPSHOT"
group = "org.asciidoctor"
sourceCompatibility = "1.6"
targetCompatibility = "1.6"

repositories {
    jcenter()
    maven { url 'http://dl.bintray.com/lordofthejars/maven'}
}

dependencies {
    compile gradleApi()

    testCompile 'org.asciidoctor:asciidoctorj:1.5.3.2'
    testCompile('org.asciidoctor:asciidoctorj-groovy-dsl:1.0.0.Alpha1') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        exclude group: 'org.asciidoctor', module: 'asciidoctorj'
    }
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile 'org.jsoup:jsoup:1.8.3'
    testCompile 'cglib:cglib-nodep:3.2.0'

    // This is unnecessary for Gradle but does help IntelliJ find the TestKit
    // classes when writing integration tests.
    testCompile gradleTestKit()

    // TestKit has to come before Gradle API:
    //
    //   https://discuss.gradle.org/t/nosuchmethoderror-in-testkit-after-2-9-2-10-transition/13505
    //
    intTestCompile gradleTestKit()
    intTestCompile gradleApi()
    intTestCompile 'commons-io:commons-io:2.4'
    intTestCompile ('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    intTestRuntime files(createClasspathManifest)
}

pluginBundle {
    website = 'https://github.com/asciidoctor/asciidoctor-gradle-plugin'
    vcsUrl  = 'https://github.com/asciidoctor/asciidoctor-gradle-plugin'

    description = 'A Gradle plugin that uses Asciidoctor via JRuby to process AsciiDoc source files within the project.'

    plugins {
        asciidoctorPlugin {
            id = 'org.asciidoctor.convert'
            displayName = 'Gradle Asciidoctor plugin'
            tags = ['gradle', 'plugin', 'asciidoctor']
        }
    }

    mavenCoordinates {
        groupId    = 'org.asciidoctor'
        artifactId = 'asciidoctor-gradle-plugin'
    }
}

plugindev {
    pluginId = 'org.asciidoctor.convert'
    pluginImplementationClass 'org.asciidoctor.gradle.AsciidoctorPlugin'
    pluginDescription 'A Gradle plugin that uses Asciidoctor via JRuby to process AsciiDoc source files within the project.'
    pluginLicenses 'Apache-2.0'
    pluginTags 'gradle', 'plugin', 'asciidoctor'
    authorId 'aalmiray'
    authorName 'Andres Almiray'
    authorEmail 'aalmiray@yahoo.com'
    projectUrl 'https://github.com/asciidoctor/asciidoctor-gradle-plugin'
    projectInceptionYear '2013'
    pomConfiguration {
        name 'asciidoctor-gradle-plugin'
        description 'A Gradle plugin that uses Asciidoctor via JRuby to process AsciiDoc source files within the project'
        url 'http://asciidoctor.org'
        inceptionYear '2013'
        licenses {
            license([:]) {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        scm {
            url 'https://github.com/asciidoctor/asciidoctor-gradle-plugin'
        }
        developers {
            developer {
                id 'mojavelinux'
                name 'Dan Allen'
                roles {
                    role 'Asciidoctor Founder and Benevolent Dictator'
                    role 'Open Source Hero'
                }
            }
            [
                aalmiray: 'Andres Almiray',
                noamt   : 'Noam Tenne',
                bmuschko: 'Benjamin Muschko'
            ].each { devId, devName ->
                developer {
                    id devId
                    name devName
                    roles {
                        role 'Developer'
                    }
                }
            }
        }
        contributors {
            [
                tombujok   : 'Tom Bujok',
                jlupi      : 'Lukasz Pielak',
                dvyazelenko: 'Dmitri Vyazelenko',
                rwinch     : 'Rob Winch',
                Skyr       : 'Stefan Schlott',
                sclassen   : 'Stephan Classen',
                McPringle  : 'Marcus Fihlon',
                msgilligan : 'Sean Gilligan',
                afolmert   : 'Adam Folmert',
                mrhaki     : 'Hubert Klein Ikkink',
                bobbytank42: 'Robert Panzer',
                oti        : 'Otmar Humbel',
                anschmi    : 'Andreas Schmidt'
            ].each { devId, devName ->
                contributor {
                    name devName
                    roles {
                        role 'contributor'
                    }
                }
            }
        }
    }
    done()
}

apply from: 'gradle/publishing.gradle'

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

